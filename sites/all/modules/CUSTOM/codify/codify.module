<?php

/**
 * Implements hook_permission();
 * 
 */

/**
 * Implements hook_menu();
 * 
 */
function codify_menu() {
  $items = array();
  $items['admin/config/codify'] = array(
  'title' => 'codify',
  'description' =>  'Configure various codify settings.',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  //'menu_name' => 'codify',
  );
  $items['admin/config/codify/settings'] = array(
    'title' => 'Settings',
    'description' => 'COD tweaks and better configuration',
    'page callback' => 'codify_item_callback',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function codify_item_callback($form, &$form_state) {
  $form['codify_settings_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum Capacity'),
    '#default_value' => variable_get('max_cap', 1000),
    '#size' => 4,
    '#maxlength' => 4,
    '#description' => t('The maximum capacity of the event.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}




/**
 * Implements hook_form_alter();
 * 
 * This might be better implemented with a mailchimp role sync since volunteers have to be given that role anyway. 
 */
function codify_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_id) && $form_id == 'user_register_form') {
    $form['#submit'][] = 'codify_user_register_submit';
    
    // Cleaning up mailchimp signup
    $form['mailchimp_lists']['#type'] = '';
    
    // vol before interests
    $form['mailchimp_lists']['#weight'] = $form['og_user_node']['#weight'] + 1;
    $form['#groups']['group_volunteer_info']->weight = $form['og_user_node']['#weight'] + 2;
    $form['#groups']['group_volunteer_info']->children[] = 'mailchimp_lists';
    $form['#group_children']['mailchimp_lists'] = 'group_volunteer_info';

    // Only show fieldset if volunteer is checked.
    $states = array(
      'invisible' => array(
        ':input[name="mailchimp_lists[mailchimp_volunteer][subscribe]"]' => array('checked' => FALSE),
      ),
    );
    $form['field_volunteer_availability']['#states'] = $states;
    $form['field_volunteer_interests']['#states'] = $states;
    $form['field_volunteer_notes']['#states'] = $states;
  }
}
/**
 * Submit callback for user_register form.
 */
function codify_user_register_submit($form, &$form_state) {
  global $user;

  // Automatically assign users to the NYC Camp 2013 event
  $gid = 1;
  $uid = $user->uid;

  $account = user_load($uid);
  $values = array(
      'entity_type' => 'user',
      'entity' => $account,
      'state' => OG_STATE_ACTIVE,
     );
  og_group('node', $gid, $values);

  // Automatically assign the "volunteer" role if users checked the box
  if ($form_state['values']['mailchimp_lists']['mailchimp_volunteer']['subscribe']){
    
    // Remove extraneous messages, give users our own.
    drupal_get_messages();
    drupal_set_message(t('Thanks for your interest in volunteering!  We will be in touch. Registration successful. You are now logged in.'));
    
    if ($role = user_role_load_by_name('volunteer')) {
      user_multiple_role_edit(array($uid), 'add_role', $role->rid);
    }
  }
}


/**
 * Implements hook_block_info() 
 */
function codify_block_info() {
  // A block for displaying the count of NYC-Camp 2013 attendees
  $blocks['registrant_count'] = array(
    'info' => t('Registrant Count'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function codify_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'registrant_count':
      $sql = 'SELECT COUNT(*) AS count FROM {users} u WHERE u.status = 1';
      $count = db_query($sql)->fetchObject()->count;
      
      $block['subject'] = null;
      $block['content'] = '<div id="registrant-count"><span class="number">'.$count.'</span> attending</div>';
      break;
  }
  return $block;
}

function codify_mail_alter(&$message) {
  if ($message['id'] == 'user_register_no_approval_required') {
    $from = '"Welcome to NYC Camp" <registrations@nyccamp.org>'; 
    }
  else { 
    $from = '"NYC Camp 2013" <info@codify.org>';
    }
    $message['from'] = $from;
    $message['headers']['From'] = $from;
    $message['headers']['Sender'] = $from;
    $message['headers']['Return-Path'] = $from;
      
  // Insure sig language matches body language for internationalisation
    $options = array(
      'langcode' => $message['language']->language,
    );
  $messageid = $message['id'];
  $signature = $messageid . t("\n--\nMail sent by NYC Camp. You are receiving this because you are signed up.", array(), $options);

  if (is_array($message['body'])) {
    $message['body'][] = $signature;
  }
  else { // Some modules use the body as a string, erroneously.
    $message['body'] .= $signature;
  }
  
}
